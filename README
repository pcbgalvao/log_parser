# Syntax #

`./log_parser.sh <string_to_parse> <logfile>`

# Examples #

`$ ./log_parser.sh 'GET / HTTP/1.1\" 200 3477' logfiles/access.log `
`Matches Found for string "GET / HTTP/1.1\" 200 3477" : 4`

`./log_parser.sh "Unit succeeded" logfiles/journalctl.log `
`Matches Found for string "Unit succeeded" : 36`

`/log_parser.sh "Unit succeeded" logfiles/emptyLogfile.log `
`Matches Found for string "Unit succeeded" : 0`

`./log_parser.sh 123 logfiles/logfile_example1.log`


# Dependecies #

`const Fs = require('fs');`
`const readLine = require('readline');`

# Requisites #
- Since is plain javascript and only two dependencies, although without exhaustive testing, may be run in several node versions.

# version 0.0.1 #
-- pkg Package
This command line interface enables you to package your Node.js project into an executable that can be run even on devices without Node.js installed.
https://github.com/vercel/pkg

# version 0.5.0 #

- Solution implemented with asynchronous fs.readFile

# version 1.0.0 #

- Changed to `readLine` to support big log files:

    `let rl = readLine.createInterface({`
    `    input: Fs.createReadStream(logFile),`
    `    (...)`
    
# version 1.0.1 #
- Ready to ship
# TODOs #

[x] Implement a asynchronous line by line read file operation;
[] Write some jasmine tests
[] Log files are not being tested for read access permisssions
[] There is a even more performant possibility,better than "readLine", here:
    https://nodejs.org/dist/latest/docs/api/readline.html
    Example: Read file stream line-by-Line
[x] Uplaod to github